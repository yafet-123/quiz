generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  
  url      = env("DATABASE_URL")
}  

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  role        String    @default("student")
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime  @updatedAt

  Subjects    Subject[]
  Exams       Exam[]
  Flashcards  Flashcard[]
  Notes       Note[]
}

model Subject {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  svg         String?
  createdBy   Int
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime  @updatedAt
  approved    Boolean   @default(false)

  User        User      @relation(fields: [createdBy], references: [id])
  Exams       Exam[]
  Topics      FlashcardTopic[]
  Quizzes     Quiz[]
  Notes       Note[]
}

model Note {
  id          Int       @id @default(autoincrement())
  title       String
  content     String    // stores rich-text HTML or Word-like content
  subjectId   Int
  createdBy   Int
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime  @updatedAt

  Subject     Subject   @relation(fields: [subjectId], references: [id])
  User        User      @relation(fields: [createdBy], references: [id])
}


model Quiz {
  id        Int        @id @default(autoincrement())
  title     String
  subjectId Int
  createdAt DateTime   @default(now())
  modifiedAt DateTime  @updatedAt

  Subject   Subject    @relation(fields: [subjectId], references: [id])
  Questions Question[]
}

model Question {
  id        Int       @id @default(autoincrement())
  question  String
  answer    String
  quizId    Int
  createdAt DateTime @default(now())
  modifiedAt DateTime @updatedAt

  Quiz      Quiz      @relation(fields: [quizId], references: [id])
  Options   Option[]
}

model Option {
  id         Int      @id @default(autoincrement())
  optionText String
  questionId Int

  Question   Question @relation(fields: [questionId], references: [id])
} 
 
model Exam {
  id          Int             @id @default(autoincrement())
  title       String
  subjectId   Int
  createdBy   Int
  createdAt   DateTime        @default(now())
  modifiedAt  DateTime        @updatedAt

  Subject     Subject          @relation(fields: [subjectId], references: [id])
  User        User             @relation(fields: [createdBy], references: [id])
  Questions   ExamQuestion[]
}

model ExamQuestion {
  id          Int          @id @default(autoincrement())
  question    String
  correctAnswer String
  examId      Int
  createdAt   DateTime     @default(now())
  modifiedAt  DateTime     @updatedAt

  Exam        Exam         @relation(fields: [examId], references: [id])
  Options     ExamOption[]
}

model ExamOption {
  id           Int          @id @default(autoincrement())
  optionText   String
  examQuestionId Int

  ExamQuestion ExamQuestion @relation(fields: [examQuestionId], references: [id])
}

model FlashcardTopic {
  id          Int         @id @default(autoincrement())
  subjectId   Int
  title       String      // e.g., "Elements of Art", "Cell Biology"
  createdAt   DateTime    @default(now())
  modifiedAt  DateTime    @updatedAt
  Flashcards  Flashcard[] // relation to Flashcard

  Subject     Subject     @relation(fields: [subjectId], references: [id])
}

model Flashcard {
  id          Int         @id @default(autoincrement())
  topicId     Int
  term        String      // e.g., "Line", "Cell Membrane"
  definition  String      // e.g., "A mark connecting two points..."
  createdAt   DateTime    @default(now())
  modifiedAt  DateTime    @updatedAt
  createdBy   Int?        // optional if you want to track user who created

  Topic       FlashcardTopic @relation(fields: [topicId], references: [id])
  User        User?          @relation(fields: [createdBy], references: [id])
}